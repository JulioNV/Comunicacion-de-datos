#include <iostream>
#include <math.h>
#include <stdlib.h>


//Tarea hecha por  :  Marcelo Araya- Francisco Ibacache- Julio Nain



using namespace std;
//Funciones
void imprime(int A[],int n)
{
    cout<<"El polinomio es  :  \n";
    for(int i=0; i<n; i++)
        cout<<A[i]<<" ";
    cout<<endl;
}


void CopiarVector(int a[], int b[],int n)  //Sirve para generar un vector aux que posteriormente guardará la derivada
{
    for(int i=0; i<n; i++)
    {
        b[i]=a[i];
    }
}

float Potencia(float a, int n)  //Creo la funcion potencia. (Preferimos no usar Pow() de math.h porque con int presenta errores en ocasiones.)
{
    int i;
    float aux=1;
    for(i=0; i<n; i++)
        aux= aux*a;

    return aux;
}

void Derivar(int coefA[],int n, int coefDer[])  //Funcion que deriva el polinomio de forma a+bx+cx2=> b+2c*x
{
    int i,coefB[n-1];
    for(i=1; i<n; i++)
    {
        coefB[i-1]= coefA[i] * i;

        /*Se multiplica el coeficiente por el grado del vector que contiene el polinomio
        y se guarda en el vector que tendrá los coef. de la derivada(una casilla menos)*/
    }

    CopiarVector(coefB, coefDer,n-1); //Guardo la derivada calculada en el vector vacio recibido del main

}

float Evaluar(int coefPol[],int n, float valor)
{
    float total=coefPol[0],aux;
    for(int i=1; i<n; i++)
    {
        aux=Potencia(valor,i);
        total= total + (coefPol[i]*aux);

    }

    return total;
}

float Error(float x1, float x2)  //Calculo el error entre las soluciones
{
    float error=((x2-x1)/x2);
    if(error<1){
        return error*-1;
    }else{

    return (error);}
}

float NewtonRaphson(float x1,int n, int coefA[], int coefB[])  //La funcion es recursiva ya que es mas rapido que la iterativa (se comprobó)
{
    float x2=x1-(Evaluar(coefA,n,x1)/Evaluar(coefB,n-1,x1));

    if(Error(x1,x2)<0.001)
        return x2;
    else
        return NewtonRaphson(x2,n,coefA,coefB); //x2 pasaría a ser nuestro nuevo x1 en la funcion recursiva
}

void ImprimeSolReal(int n, int coefA[], int coefB[],int m)
{
    float x,aux=0;
    int conta=1; //Vector con las potenciales soluciones
    cout <<"Las soluciones reales son  :"<<endl;

     float i=1;

        x=NewtonRaphson(i,m,coefA,coefB);
        if(x==aux) {}

        else
        {
            cout <<"x"<<conta<<"  =  "<<x<<endl;
            conta++;
        }
        aux=x;

    if(conta==1)
        cout<<"No hay solucion en los reales"<<endl;
}

void LeerPoli(string p, int  a[],int *t)
{


    string p1="";
    int i;


    /**Se eliminan los caracteres*/
    for(i=0; i<p.length(); i++)
    {
        if( p.at(i)=='*')
        {

        }
        else
        {
            p1=p1 + p.at(i);
        }
    }



    /**tamaño del vector numerico*/
    int vect=0;
    for(i=0; i<p1.length(); i++)
    {
        if(p1.at(i)=='x' || p1.at(i)=='X')
        {
            vect=vect+2;
        }

    }

    /**iniciar vector*/
    int numeros[vect];
    *t=vect;
    for(i=0; i<vect; i++)
    {
        numeros[i]=0;
    }

    /**llenar vector con polinomio*/
    int ct=0;

    for(i=0; i<p1.length(); i++)
    {
L:
        if(p1.at(i)=='x' || p1.at(i)=='X' || p1.at(i)=='+')
        {
            i++;
            goto L;
        }
        else
        {
            if(p1.at(i)=='-')
            {
                i++;
                if(i+1<p1.length())
                {
                    if(p1.at(i+1)=='X' || p1.at(i+1)=='x' || p1.at(i+1)=='+' || p1.at(i+1)=='-')
                    {
                        numeros[ct]=int(p1.at(i))-48;
                        numeros[ct]=numeros[ct]*-1;
                        ct++;
                    }
                    else
                    {
                        while (p1.at(i+1)!='X' && p1.at(i+1)!='x' && p1.at(i+1)!='+' && p1.at(i+1)!='-')
                        {
                            numeros[ct]=numeros[ct]*10;
                            numeros[ct]=numeros[ct]+int(p1.at(i))-48;
                            i++;
                            if(i+1==p1.length())
                            {
                                numeros[ct]=numeros[ct]*10;
                                numeros[ct]=numeros[ct]+int(p1.at(i))-48;
                                numeros[ct]=numeros[ct]*-1;
                                goto L1;
                            }
                        }
                        numeros[ct]=numeros[ct]*10;
                        numeros[ct]=numeros[ct]+int(p1.at(i))-48;
                        numeros[ct]=numeros[ct]*-1;
                        ct++;
                    }
                }
                else
                {
                    numeros[ct]=int(p1.at(i))-48;
                    numeros[ct]=numeros[ct]*-1;
                }

            }
            else
            {
                if(i+1<p1.length())
                {
                    if(p1.at(i+1)=='X' || p1.at(i+1)=='x' || p1.at(i+1)=='+' || p1.at(i+1)=='-')
                    {
                        numeros[ct]=int(p1.at(i))-48;

                        ct++;
                    }
                    else
                    {
                        while (p1.at(i+1)!='X' && p1.at(i+1)!='x' && p1.at(i+1)!='+' && p1.at(i+1)!='-')
                        {
                            numeros[ct]=numeros[ct]*10;
                            numeros[ct]= numeros[ct]+int(p1.at(i))-48;


                            i++;
                            if(i+1==p1.length())
                            {
                                numeros[ct]=numeros[ct]*10;
                                numeros[ct]= numeros[ct]+int(p1.at(i))-48;
                                goto L1;
                            }
                        }
                        numeros[ct]=numeros[ct]*10;
                        numeros[ct]= numeros[ct]+int(p1.at(i))-48;
                        ct++;
                    }

                }
                else
                {
                    numeros[ct]=int(p1.at(i))-48;
                }

            }
        }
    }
L1:
    *a=vect;
    CopiarVector(numeros, a, vect);
}

void Ordenar(int a[], int CoefA[],int largo)
{
    int i,m=a[1]+1;

    for(i=0; i<m; i++) //Inicializo la matriz
        CoefA[i]=0;
    for(i=0; i<largo; i++) // Coloco los coef. en el lugar que corresponda segun su grado
    {
        if(i%2!=0)
        {
            CoefA[a[i]]=a[i-1];

        }


    }
}


int main()
{
    /*   int b[7]={1,0,0,2,0,-5,6},aux[6];
       Derivar(b,7,aux);
       ImprimeSolReal(7,b,aux);
     int a[100],b[100],largo,Lpol;
       LeerPoli(a,&Lpol);
       imprime(a,Lpol);
       Ordenar(a,&largo,b);
       imprime(b,largo);
    */
    string pol;
    int a[100];
    int aux[100];
    cout<<"Ingrese polinomio"<<endl;
    cin>>pol;
    int largo;
    LeerPoli(pol,a,&largo);
    //imprime(a,largo);
    int m=a[1]+1;
    int ordenado[m];
    Ordenar(a,ordenado,largo);

    //imprime(ordenado,m);
    Derivar(ordenado,m,aux);


  ImprimeSolReal(largo,ordenado,aux,m);

    return 0;

}
